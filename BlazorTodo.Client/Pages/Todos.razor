@page "/todos"

@using BlazorTodo.Client.Models
@using BlazorTodo.Client.Services
@using Serilog

<MudText Typo="Typo.h2">Todos</MudText>

<MudForm>
    <MudGrid>
        <MudItem sm="10" xs="12">
            <MudTextField @bind-Value="TextValue" Immediate="true" Label="Add your todo" Variant="Variant.Text" OnKeyDown="OnKeyDown"></MudTextField>
        </MudItem>
        <MudItem sm="2" xs="12">
            <MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Primary" OnClick="AddTodo">Add</MudButton>
        </MudItem>
    </MudGrid>
</MudForm>

<div class="mt-10"></div>

@if (TodoList.Count == 0)
{
    <MudText Typo="Typo.body1">No Todos</MudText>
}
else
{
    foreach (var todo in TodoList)
    {
        <MudPaper @key="@todo.Id" Class="d-flex flex-grow-1 gap-4 mt-1 pa-1">
            <MudCheckBox T="bool" @bind-Checked="@todo.IsComplete" />
            <MudText Class="flex-grow-1 pt-3" Style="@(todo.IsComplete ? "text-decoration:line-through;" : "")" Typo="Typo.body1">@todo.Title</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(e => DeleteTodo(todo))" />
        </MudPaper>
    }
}

<MudButton Variant="Variant.Filled" FullWidth="false" Color="Color.Error" Class="mt-10" OnClick="ClearTodos">Clear</MudButton>

@code {
    [Inject]
    public TodoListState State { get; set; }

    public string TextValue { get; set; } = string.Empty;

    public List<TodoItem> TodoList { get; set; } = new List<TodoItem>();

    public async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Log.Information("Enter key pressed");
            await AddTodo();
        }
    }

    public async Task AddTodo()
    {
        var todo = new TodoItem { Title = TextValue };
        TodoList.Add(todo); ;
        TextValue = string.Empty;

        await UpdateState();

        Log.Information("Added Todo {@todo}", todo);
    }

    public async Task DeleteTodo(TodoItem todo)
    {
        TodoList.Remove(todo);

        await UpdateState();

        Log.Information("Removed Todo {@todo}", todo);
    }

    public async Task ClearTodos()
    {
        TodoList.Clear();
        await UpdateState();

        Log.Information("Clearing todos");
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadState();
        await base.OnInitializedAsync();
    }

    private async Task LoadState()
    {
        var todoItems = await State.Get();
        if (todoItems?.Count > 0)
            TodoList.AddRange(todoItems);

        Log.Information("Loaded state");
    }

    private async Task UpdateState()
    {
        await State.Set(TodoList);

        Log.Information("Updating state");
    }
}
